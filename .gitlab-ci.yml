stages:
  - build
  - release

before_script:
- export APP_VERSION=$(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
- echo "Argo CD Application Updater v$APP_VERSION"

build:
  stage: build
  image: node:14-alpine
  script:
  - npm install
  - npm run build
  - npm ci --only=production
  artifacts:
    paths:
    - node_modules
    - dist
    - package.json
    - package-lock.json
    - Dockerfile
  rules:
  - if: '$CI_COMMIT_REF_NAME == "main"'
    when: always
  - when: never

release:
  stage: release
  image: docker:20.10
  services:
  - docker:20.10-dind
  variables:
    GIT_STRATEGY: none
  script:
  - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$APP_VERSION
  - export IMAGE_TAG_LATEST=$CI_REGISTRY_IMAGE:latest
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build -t $IMAGE_TAG .
  - docker tag $IMAGE_TAG $IMAGE_TAG_LATEST
  - docker push $IMAGE_TAG
  - docker push $IMAGE_TAG_LATEST
  rules:
  - if: '$CI_COMMIT_REF_NAME == "main"'
    when: always
  - when: never
